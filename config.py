#!/usr/bin/env python3
"""
Configura√ß√µes centralizadas do projeto TDEO/GAIA-DRL
Porta√ß√£o OMNeT++ para NS-3
"""

import os

# =============================================================================
# CONFIGURA√á√ïES DE SIMULA√á√ÉO
# =============================================================================

# Par√¢metros da rede
NETWORK_CONFIG = {
    'n_nodes': 5,                    # N√∫mero de n√≥s
    'distances': [25, 35, 45, 55],   # Dist√¢ncias em metros
    'channel_freq': 5.18e9,          # Frequ√™ncia do canal (5 GHz)
    'channel_number': 36,            # N√∫mero do canal
    'standard': '802.11a',           # Padr√£o Wi-Fi
    'data_rate': 'OfdmRate6Mbps'     # Taxa de dados
}

# Par√¢metros de simula√ß√£o
SIMULATION_CONFIG = {
    'default_time': 600,             # Tempo padr√£o em segundos
    'ping_interval': 1.0,            # Intervalo entre pings
    'packet_size': 64,               # Tamanho do pacote em bytes
    'powers': [2, 5, 10, 15],        # Pot√™ncias de transmiss√£o (mW)
    'start_time': 1.0,               # Tempo de in√≠cio das aplica√ß√µes
    'client_start_time': 2.0         # Tempo de in√≠cio dos clientes
}

# Configura√ß√µes de aplica√ß√£o
APPLICATION_CONFIG = {
    'server_port': 9,                # Porta do servidor UDP Echo
    'echo_interval': 1.0,            # Intervalo do Echo
    'max_packets': None              # M√°ximo de pacotes (None = ilimitado)
}

# =============================================================================
# CONFIGURA√á√ïES DE ARQUIVOS
# =============================================================================

# Diret√≥rios
DIRECTORIES = {
    'src': 'src',
    'scripts': 'scripts',
    'results': 'results',
    'csv': 'results/csv',
    'plots': 'results/plots',
    'logs': 'results/logs',
    'docs': 'docs'
}

# Arquivos
FILES = {
    'simulation': 'src/tdeo-omnet-port.cc',
    'main_script': 'scripts/run-simulations.sh',
    'clean_script': 'scripts/clean.sh',
    'compare_script': 'compare-results.py',
    'results_csv': 'results/csv/tdeo-simulated-omnet.csv',
    'comparison_summary': 'results/comparison_summary.csv',
    'comparison_report': 'results/comparison-report.md',
    'visualization': 'results/plots/comparison_visualization.png'
}

# =============================================================================
# CONFIGURA√á√ïES DE RESULTADOS
# =============================================================================

# Taxas de sucesso esperadas (OMNeT++)
EXPECTED_SUCCESS_RATES = {
    2: 30.0,    # 2mW: ~30%
    5: 55.0,    # 5mW: ~55%
    10: 80.0,   # 10mW: ~80%
    15: 95.0    # 15mW: ~95%
}

# Limites de aceita√ß√£o
ACCEPTANCE_LIMITS = {
    'max_avg_difference': 15.0,      # Diferen√ßa m√©dia m√°xima aceit√°vel (%)
    'max_individual_difference': 25.0, # Diferen√ßa individual m√°xima (%)
    'min_correlation': 0.8           # Correla√ß√£o m√≠nima aceit√°vel
}

# =============================================================================
# CONFIGURA√á√ïES DE VISUALIZA√á√ÉO
# =============================================================================

# Configura√ß√µes de gr√°ficos
PLOT_CONFIG = {
    'figure_size': (14, 10),
    'dpi': 300,
    'font_size': 12,
    'colors': {
        'ns3': 'skyblue',
        'omnet': 'lightcoral',
        'positive_diff': 'green',
        'negative_diff': 'red'
    },
    'alpha': 0.8,
    'grid_alpha': 0.3
}

# =============================================================================
# CONFIGURA√á√ïES DE LOG
# =============================================================================

# N√≠veis de log
LOG_LEVELS = {
    'debug': 'level_all',
    'info': 'level_info',
    'warning': 'level_warn',
    'error': 'level_error'
}

# Configura√ß√µes de log
LOG_CONFIG = {
    'component': 'TDEO',
    'default_level': 'level_info',
    'file_prefix': 'simulation_',
    'file_suffix': '.log'
}

# =============================================================================
# FUN√á√ïES √öTEIS
# =============================================================================

def get_results_file(power):
    """Retorna o nome do arquivo de resultados para uma pot√™ncia"""
    return f"results/logs/simulation_{power}mW.log"

def get_expected_rate(power):
    """Retorna a taxa de sucesso esperada para uma pot√™ncia"""
    return EXPECTED_SUCCESS_RATES.get(power, 0.0)

def is_acceptable_difference(difference):
    """Verifica se uma diferen√ßa √© aceit√°vel"""
    return abs(difference) <= ACCEPTANCE_LIMITS['max_individual_difference']

def create_directories():
    """Cria todos os diret√≥rios necess√°rios"""
    for directory in DIRECTORIES.values():
        os.makedirs(directory, exist_ok=True)

def get_simulation_command(power, time=None):
    """Retorna o comando de simula√ß√£o para uma pot√™ncia"""
    if time is None:
        time = SIMULATION_CONFIG['default_time']
    
    return f"./ns3 run \"src/tdeo-omnet-port --txPower={power} --simTime={time}\""

# =============================================================================
# VALIDA√á√ÉO DE CONFIGURA√á√ïES
# =============================================================================

def validate_config():
    """Valida as configura√ß√µes do projeto"""
    errors = []
    
    # Verificar se todos os diret√≥rios podem ser criados
    for name, path in DIRECTORIES.items():
        if not os.path.exists(path):
            try:
                os.makedirs(path, exist_ok=True)
            except Exception as e:
                errors.append(f"Erro ao criar diret√≥rio {name}: {e}")
    
    # Verificar se os arquivos principais existem
    required_files = ['simulation', 'main_script', 'compare_script']
    for file_key in required_files:
        file_path = FILES[file_key]
        if not os.path.exists(file_path):
            errors.append(f"Arquivo obrigat√≥rio n√£o encontrado: {file_path}")
    
    # Verificar configura√ß√µes de simula√ß√£o
    if SIMULATION_CONFIG['default_time'] <= 0:
        errors.append("Tempo de simula√ß√£o deve ser positivo")
    
    if not SIMULATION_CONFIG['powers']:
        errors.append("Lista de pot√™ncias n√£o pode estar vazia")
    
    return errors

if __name__ == "__main__":
    # Testar configura√ß√µes
    print("üîß Validando configura√ß√µes do projeto TDEO/GAIA-DRL...")
    
    errors = validate_config()
    
    if errors:
        print("‚ùå Erros encontrados:")
        for error in errors:
            print(f"   - {error}")
        exit(1)
    else:
        print("‚úÖ Todas as configura√ß√µes est√£o v√°lidas!")
        
        # Mostrar resumo
        print("\nüìä Resumo das configura√ß√µes:")
        print(f"   - N√≥s: {NETWORK_CONFIG['n_nodes']}")
        print(f"   - Pot√™ncias: {SIMULATION_CONFIG['powers']} mW")
        print(f"   - Tempo padr√£o: {SIMULATION_CONFIG['default_time']}s")
        print(f"   - Dist√¢ncias: {NETWORK_CONFIG['distances']}m")
