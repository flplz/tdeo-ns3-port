#!/bin/bash

# =============================================================================
# TDEO/GAIA-DRL - Script de Execu√ß√£o de Simula√ß√µes NS-3
# Autor: Edwardes Galhardo (IFTO)
# Data: 15/08/2024
# =============================================================================

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cores
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fun√ß√£o para mostrar banner
show_banner() {
    echo "=================================================================="
    echo "üöÄ TDEO/GAIA-DRL - Simula√ß√µes NS-3"
    echo "=================================================================="
    echo "üìã Descri√ß√£o: Port OMNeT++ para NS-3"
    echo "üéØ Objetivo: Comparar taxas de sucesso com diferentes pot√™ncias"
    echo "üìä Pot√™ncias: 2mW, 5mW, 10mW, 15mW"
    echo "‚è±Ô∏è  Tempo: 600 segundos por simula√ß√£o"
    echo "=================================================================="
    echo
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    print_status "Verificando depend√™ncias..."
    
    # Verificar se NS-3 est√° compilado
    if [ ! -f "./ns3" ]; then
        print_error "NS-3 n√£o encontrado. Execute './waf build' primeiro."
        exit 1
    fi
    
    # Verificar se o arquivo de simula√ß√£o existe
    if [ ! -f "src/tdeo-omnet-port.cc" ]; then
        print_error "Arquivo de simula√ß√£o n√£o encontrado: src/tdeo-omnet-port.cc"
        exit 1
    fi
    
    print_success "Depend√™ncias verificadas!"
}

# Fun√ß√£o para criar diret√≥rios
create_directories() {
    print_status "Criando diret√≥rios de resultados..."
    
    mkdir -p results/csv
    mkdir -p results/plots
    mkdir -p results/logs
    
    print_success "Diret√≥rios criados!"
}

# Fun√ß√£o para executar simula√ß√£o
run_simulation() {
    local power=$1
    local sim_time=${2:-600}
    local log_file="results/logs/simulation_${power}mW.log"
    
    print_status "Executando simula√ß√£o com ${power}mW..."
    echo "Pot√™ncia: ${power}mW" | tee -a "$log_file"
    echo "Tempo: ${sim_time}s" | tee -a "$log_file"
    echo "In√≠cio: $(date)" | tee -a "$log_file"
    echo "----------------------------------------" | tee -a "$log_file"
    
    # Executar simula√ß√£o
    ./ns3 run "src/tdeo-omnet-port --txPower=${power} --simTime=${sim_time}" 2>&1 | tee -a "$log_file"
    
    echo "----------------------------------------" | tee -a "$log_file"
    echo "Fim: $(date)" | tee -a "$log_file"
    echo "" | tee -a "$log_file"
    
    print_success "Simula√ß√£o ${power}mW conclu√≠da!"
}

# Fun√ß√£o para executar todas as simula√ß√µes
run_all_simulations() {
    print_status "Iniciando execu√ß√£o de todas as simula√ß√µes..."
    
    local powers=(2 5 10 15)
    local total_simulations=${#powers[@]}
    local current=0
    
    for power in "${powers[@]}"; do
        current=$((current + 1))
        print_status "Simula√ß√£o ${current}/${total_simulations}: ${power}mW"
        run_simulation "$power"
        echo
    done
    
    print_success "Todas as simula√ß√µes conclu√≠das!"
}

# Fun√ß√£o para gerar relat√≥rio
generate_report() {
    print_status "Gerando relat√≥rio de resultados..."
    
    if [ -f "compare-results.py" ]; then
        python3 compare-results.py
        print_success "Relat√≥rio gerado em results/"
    else
        print_warning "Script de compara√ß√£o n√£o encontrado"
    fi
}

# Fun√ß√£o para mostrar resumo
show_summary() {
    echo
    echo "=================================================================="
    echo "üìä RESUMO DA EXECU√á√ÉO"
    echo "=================================================================="
    echo "‚úÖ Simula√ß√µes executadas:"
    echo "   - 2mW: results/logs/simulation_2mW.log"
    echo "   - 5mW: results/logs/simulation_5mW.log"
    echo "   - 10mW: results/logs/simulation_10mW.log"
    echo "   - 15mW: results/logs/simulation_15mW.log"
    echo
    echo "üìà Resultados dispon√≠veis em:"
    echo "   - CSV: results/csv/"
    echo "   - Gr√°ficos: results/plots/"
    echo "   - Logs: results/logs/"
    echo
    echo "üîç Para comparar com OMNeT++:"
    echo "   python3 compare-results.py"
    echo "=================================================================="
}

# Fun√ß√£o principal
main() {
    show_banner
    
    # Verificar argumentos
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "Uso: $0 [OP√á√ÉO]"
        echo
        echo "Op√ß√µes:"
        echo "  --help, -h     Mostrar esta ajuda"
        echo "  --power N      Executar apenas pot√™ncia N mW"
        echo "  --time N       Definir tempo de simula√ß√£o (padr√£o: 600s)"
        echo "  --all          Executar todas as pot√™ncias (padr√£o)"
        echo
        echo "Exemplos:"
        echo "  $0 --all                    # Executar todas as pot√™ncias"
        echo "  $0 --power 5                # Executar apenas 5mW"
        echo "  $0 --power 10 --time 300    # Executar 10mW por 300s"
        exit 0
    fi
    
    # Verificar depend√™ncias
    check_dependencies
    
    # Criar diret√≥rios
    create_directories
    
    # Executar simula√ß√µes baseado nos argumentos
    if [ "$1" = "--power" ] && [ -n "$2" ]; then
        local power=$2
        local time=${3:-600}
        run_simulation "$power" "$time"
    else
        # Executar todas as simula√ß√µes
        run_all_simulations
    fi
    
    # Gerar relat√≥rio
    generate_report
    
    # Mostrar resumo
    show_summary
}

# Executar fun√ß√£o principal
main "$@"
